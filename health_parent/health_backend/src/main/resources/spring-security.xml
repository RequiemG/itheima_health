<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                         http://www.springframework.org/schema/beans/spring-beans.xsd
                         http://www.springframework.org/schema/security
                         http://www.springframework.org/schema/security/spring-security.xsd
                         http://www.springframework.org/schema/context
                         http://www.springframework.org/schema/context/spring-context.xsd
                         http://www.springframework.org/schema/mvc
                         http://www.springframework.org/schema/mvc/spring-mvc.xsd">



    <!--配置哪些资源匿名可以访问（不登录也可以访问）-->
    <security:http security="none" pattern="/login.html"/>
    <security:http security="none" pattern="/register.html"/>
    <security:http security="none" pattern="/css/**"/>
    <security:http security="none" pattern="/img/**"/>
    <security:http security="none" pattern="/js/**"/>
    <security:http security="none" pattern="/plugins/**"/>


    <security:http auto-config="true" use-expressions="true">
        <!--pages下的页面只要验证后就能访问，权限的话让注解来控制-->
        <security:intercept-url pattern="/pages/**" access="isAuthenticated()"/>
        <!--自定义登入页面，登入由框架来负责，所以要配置登陆表单等信息-->

        <security:headers>
            <!--设置在页面可以通过iframe访问受保护的页面，默认为不允许访问-->
            <!--iframe嵌套页面不安全，所以框架自动帮我们屏蔽，所以要配置-->
            <security:frame-options policy="SAMEORIGIN"/>
        </security:headers>

        <security:form-login
            login-page="/login.html"
            username-parameter="username"
            password-parameter="password"
            login-processing-url="/login.do"
            default-target-url="/pages/main1.html"
            authentication-failure-url="/login.html"
        />
        <!--如果自定义登入页面，需要指定过滤器-->
        <security:csrf disabled="true"/>

        <!--
        logout：退出登陆
        logout-url：退出登陆操作对应的请求路径
        logout-success-url：退出登入后的跳转页面
        -->
        <security:logout logout-url="/logout.do" logout-success-url="/login.html" invalidate-session="true"/>
    </security:http>









    <!-- authentication-manager:认证管理器,用于处理认证操作 -->
    <security:authentication-manager>
        <!-- authentication-provider:认证提供者,执行具体的认证逻辑 -->
        <security:authentication-provider user-service-ref="springSecurityUserService"> <!--因为我们已经加了注解，对象已经生成了，就不用写bean了-->
            <!--指定密码进行加密的对象-->
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>


    <!--因为我们已经加了注解，对象已经生成了，就不用写bean了-->
<!--    <bean id="userService" class="cn.zxj.service.SpringSecurityUserService"/>-->
<!--    <bean id="userService2" class="cn.zxj.service.SpringSecurityUserService2"/>-->

    <!--配置密码加密对象-->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    <!--开启spring注解使用 springmvc中已经开启了注解驱动了，这里就不用配置了-->
<!--    <mvc:annotation-driven/>-->
    <context:component-scan base-package="com.itheima.service"/>
    <security:global-method-security pre-post-annotations="enabled" proxy-target-class="true" />
</beans>